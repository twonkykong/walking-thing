//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""349698e8-2ade-4580-9b7c-c23652993f81"",
            ""actions"": [
                {
                    ""name"": ""Left foot"",
                    ""type"": ""Button"",
                    ""id"": ""94bd9f14-b567-434c-aa06-7163cf3d0996"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right foot"",
                    ""type"": ""Button"",
                    ""id"": ""605fa7d7-ac46-48ea-babb-1cb9f2a74a7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse position"",
                    ""type"": ""Value"",
                    ""id"": ""fc2e5300-b24b-4f15-a8c3-fe6618f213ae"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Use action"",
                    ""type"": ""Button"",
                    ""id"": ""45e38785-8af5-4a53-a761-89bdb0e85ed6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9d7da24f-99c7-48c7-8514-e85e0a1e9781"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left foot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b380b07-7b34-4ba8-bcda-8a20ef200bd1"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right foot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d180085e-c50a-433f-b12c-8e03e9f80d1d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27b30256-6710-4045-a22c-00694f8f4b28"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Leftfoot = m_Player.FindAction("Left foot", throwIfNotFound: true);
        m_Player_Rightfoot = m_Player.FindAction("Right foot", throwIfNotFound: true);
        m_Player_Mouseposition = m_Player.FindAction("Mouse position", throwIfNotFound: true);
        m_Player_Useaction = m_Player.FindAction("Use action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Leftfoot;
    private readonly InputAction m_Player_Rightfoot;
    private readonly InputAction m_Player_Mouseposition;
    private readonly InputAction m_Player_Useaction;
    public struct PlayerActions
    {
        private @InputMaster m_Wrapper;
        public PlayerActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Leftfoot => m_Wrapper.m_Player_Leftfoot;
        public InputAction @Rightfoot => m_Wrapper.m_Player_Rightfoot;
        public InputAction @Mouseposition => m_Wrapper.m_Player_Mouseposition;
        public InputAction @Useaction => m_Wrapper.m_Player_Useaction;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Leftfoot.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftfoot;
                @Leftfoot.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftfoot;
                @Leftfoot.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftfoot;
                @Rightfoot.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightfoot;
                @Rightfoot.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightfoot;
                @Rightfoot.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightfoot;
                @Mouseposition.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouseposition;
                @Mouseposition.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouseposition;
                @Mouseposition.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouseposition;
                @Useaction.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUseaction;
                @Useaction.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUseaction;
                @Useaction.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUseaction;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Leftfoot.started += instance.OnLeftfoot;
                @Leftfoot.performed += instance.OnLeftfoot;
                @Leftfoot.canceled += instance.OnLeftfoot;
                @Rightfoot.started += instance.OnRightfoot;
                @Rightfoot.performed += instance.OnRightfoot;
                @Rightfoot.canceled += instance.OnRightfoot;
                @Mouseposition.started += instance.OnMouseposition;
                @Mouseposition.performed += instance.OnMouseposition;
                @Mouseposition.canceled += instance.OnMouseposition;
                @Useaction.started += instance.OnUseaction;
                @Useaction.performed += instance.OnUseaction;
                @Useaction.canceled += instance.OnUseaction;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnLeftfoot(InputAction.CallbackContext context);
        void OnRightfoot(InputAction.CallbackContext context);
        void OnMouseposition(InputAction.CallbackContext context);
        void OnUseaction(InputAction.CallbackContext context);
    }
}
